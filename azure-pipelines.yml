trigger:
- master

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build an image
      inputs:
        containerRegistry: 'DockerHUb'
        repository: 'thiagomartinsemartins/deskflora'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: '$(tag)'
- stage: Deploy
  displayName: Deploy
  jobs:
    - job: Deploy
      displayName: Deploy
      pool:
        name: Default
        vmImage: ubuntu-latest
      steps:
        - script: |
        
# Remove o contêiner se estiver parado, o comando será "silenciosamente" ignorado se o contêiner não existir        
# Para o contêiner se estiver em execução, o comando será "silenciosamente" ignorado se o contêiner não existir
            echo "Parando o contêiner existente (se estiver em execução)..."
            docker stop deskflora || true                 
            echo "Removendo o contêiner existente (se estiver parado)..."
            docker rm deskflora || true    

            echo "Puxando a nova imagem do Docker Hub..."
            docker pull thiagomartinsemartins/deskflora:$(tag)

            echo "Iniciando o novo contêiner..."
            docker run -d -p 8080:80 --name deskflora thiagomartinsemartins/deskflora:$(tag)
          displayName: 'Deploy do contêiner'
#--filter "publish=$PORT:80"
